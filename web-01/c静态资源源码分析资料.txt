
SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效

 @Configuration(
        proxyBeanMethods = false
    )
    @Import({WebMvcAutoConfiguration.EnableWebMvcConfiguration.class})
    @EnableConfigurationProperties({WebMvcProperties.class, WebProperties.class})
    @Order(0)
    public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer,
    ServletContextAware {....}
   配置文件的相关属性和xxx进行了绑定。WebMvcProperties==spring.mvc、 WebProperties==spring.web

   1.配置类只有一个有参构造器
   	//有参构造器所有参数的值都会从容器中确定
   //ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象
   //WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象
   //ListableBeanFactory beanFactory Spring的beanFactory
   //HttpMessageConverters 找到所有的HttpMessageConverters
   //ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========
   //DispatcherServletPath
   //ServletRegistrationBean   给应用注册Servlet、Filter....
   	public WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,
   				ListableBeanFactory beanFactory, ObjectProvider<HttpMessageConverters> messageConvertersProvider,
   				ObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizerProvider,
   				ObjectProvider<DispatcherServletPath> dispatcherServletPath,
   				ObjectProvider<ServletRegistrationBean<?>> servletRegistrations) {
   			this.resourceProperties = resourceProperties;
   			this.mvcProperties = mvcProperties;
   			this.beanFactory = beanFactory;
   			this.messageConvertersProvider = messageConvertersProvider;
   			this.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();
   			this.dispatcherServletPath = dispatcherServletPath;
   			this.servletRegistrations = servletRegistrations;
   		}
  2.资源处理的默认规则
    @Override
    		public void addResourceHandlers(ResourceHandlerRegistry registry) {
    			if (!this.resourceProperties.isAddMappings()) {
    				logger.debug("Default resource handling disabled");
    				return;
    			}
    			Duration cachePeriod = this.resourceProperties.getCache().getPeriod();
    			CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();
    			//webjars的规则
                if (!registry.hasMappingForPattern("/webjars/**")) {
    				customizeResourceHandlerRegistration(registry.addResourceHandler("/webjars/**")
    						.addResourceLocations("classpath:/META-INF/resources/webjars/")
    						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));
    			}
    			spring:
                 #  mvc:
                 #    static-path-pattern: /res/**

                   resources:
                     add-mappings: false   禁用所有静态资源规则

     默认的四个文件夹
                //
    			String staticPathPattern = this.mvcProperties.getStaticPathPattern();
    			if (!registry.hasMappingForPattern(staticPathPattern)) {
    				customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)
    						.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))
    						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));
    			}
    			都不存在则是自己设置的
    			  if (this.servletContext != null) {
                                                 ServletContextResource resource = new ServletContextResource(this.servletContext, "/");
                                                 registration.addResourceLocations(new Resource[]{resource});
                                             }
    		}

   getStaticLocations==>     public static class Resources {
        private static final String[] CLASSPATH_RESOURCE_LOCATIONS =
        new String[]{"classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"};
        private String[] staticLocations;



        欢迎页源码分析
            @Bean
                public WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) {
                    WelcomePageHandlerMapping welcomePageHandlerMapping = new WelcomePageHandlerMapping(new TemplateAvailabilityProviders(applicationContext), applicationContext, this.getWelcomePage(), this.mvcProperties.getStaticPathPattern());
                    welcomePageHandlerMapping.setInterceptors(this.getInterceptors(mvcConversionService, mvcResourceUrlProvider));
                    welcomePageHandlerMapping.setCorsConfigurations(this.getCorsConfigurations());
                    return welcomePageHandlerMapping;
                }

    WelcomePageHandlerMapping==>       WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders, ApplicationContext applicationContext,
    Resource welcomePage, String staticPathPattern) {

       这里写死了 所以为什么spring:
                  #  mvc:
                  #    static-path-pattern: /res/** 配置了之后找不到欢迎页面

                if (welcomePage != null && "/**".equals(staticPathPattern)) {
                    logger.info("Adding welcome page: " + welcomePage);
                    this.setRootViewName("forward:index.html");
                } else if (this.welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) {

                调用controller 查找
                    logger.info("Adding welcome page template: index");
                    this.setRootViewName("index");
                }

            }


