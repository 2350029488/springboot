#        @Bean
#        @ConditionalOnMissingBean({HiddenHttpMethodFilter.class})
#        @ConditionalOnProperty(
#        prefix = "spring.mvc.hiddenmethod.filter",
#        name = {"enabled"}
#        )
#        public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {
#        return new OrderedHiddenHttpMethodFilter();
#      }
if ("POST".equals(request.getMethod()) && request.getAttribute("javax.servlet.error.exception") == null) {
            String paramValue = request.getParameter(this.methodParam);
            if (StringUtils.hasLength(paramValue)) {
            }
                                     自动转为大写 所以大小写不重要
                String method = paramValue.toUpperCase(Locale.ENGLISH);
                if (ALLOWED_METHODS.contains(method)) {
                    requestToUse = new HiddenHttpMethodFilter.HttpMethodRequestWrapper(request, method);
                }
            }

#springboot中使用restful风格 首先页面表单 <input name="_method" type="hidden" value="delete"/>
# 然后需要在yml配置文件中 配置 spring.mvc.hiddenmethod.filter.enabled=true

Rest原理（表单提交要使用REST的时候）
● 表单提交会带上_method=PUT
● 请求过来被HiddenHttpMethodFilter拦截
  ○ 请求是否正常，并且是POST
    ■ 获取到_method的值。
    ■ 兼容以下请求；PUT.DELETE.PATCH
    ■ 原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。
    ■ 过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requesWrapper的。

Rest使用客户端工具，
●如PostMan直接发送Put、delete等方式请求，无需Filter。

 //自定义 filter
    @Bean
    public HiddenHttpMethodFilter hiddenHttpMethodFilter(){
        HiddenHttpMethodFilter hiddenHttpMethodFilter=new HiddenHttpMethodFilter();
        hiddenHttpMethodFilter.setMethodParam("_m");
        return hiddenHttpMethodFilter;
    }
