@Component
public class MyComHealthIndicator extends AbstractHealthIndicator {
    /**
     * 编写真实的健康检查方法
     * @param builder
     * @throws Exception
     */
    @Override
    protected void doHealthCheck(Health.Builder builder) throws Exception {
        Map<String,Object> map=new HashMap<>();
        /*
        * 主要是这个判断时自己的业务  这里是模拟业务
        * */
        if (1==2){
            builder.status(Status.UP);//返回健康信息
            map.put("count",1);
            map.put("ms",100);

        }else {
            builder.status(Status.OUT_OF_SERVICE);//不健康
            map.put("err","连接超时");
        }
    }
}


/**
 * 自定义端点  类似health info 端点
 *
 *
 */
@Component
@Endpoint(id = "service")
public class MyEndpoint {
    @ReadOperation//端点的读操作
    public Map getDockerInfo(){
        return Collections.singletonMap("DockerInfo","启动了");
    }

    @WriteOperation
    public void stopDocker(){
        System.out.println("socker stop........");
    }
}
